/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  GatewayFactoryABI,
  GatewayFactoryABIInterface,
} from "../GatewayFactoryABI";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "gatewayAddr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "gatewayOwnerAddr",
        type: "address",
      },
    ],
    name: "GatewayDeployed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_gatewayOwner",
        type: "address",
      },
    ],
    name: "deployGateway",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class GatewayFactoryABI__factory {
  static readonly abi = _abi;
  static createInterface(): GatewayFactoryABIInterface {
    return new Interface(_abi) as GatewayFactoryABIInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): GatewayFactoryABI {
    return new Contract(address, _abi, runner) as unknown as GatewayFactoryABI;
  }
}
